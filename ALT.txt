//*******************************************************
// Image labelling tool for Detectnet dataset v1.0.0
// Alper ALTINOK, 2017
// ******************************************************
// If you want to label objects with other then "car",
// then simply find "car" word in this code somewhere down below
// and change it to any custom dataset label you want.
// This version of macro is not designed to preserve multiple labels
// like (car, vehicle, pedestrian, etc). Useful only for 
// single label usage.
//*******************************************************
// Action Bar description file :A.L.T

<codeLibrary>

    function indexOfArray(array, value) {
        for (a=0; a<lengthOf(array); a++) {
            if (array[a]==value) {
                return a;
            }
        }
        return -1;
    }

    function set_and_zoom(){
        setTool("Rectangle");        
    }    

    function save_result(mainTitle){
        setBatchMode(true);
        output_dir = getDirectory("image");
        title1 = "annotation_table";
        title2 = "[" + title1 + "]";
        run("New... ", "name=" + title2 + " type=Table"); 

        nCount = roiManager('count')            
        for (i=0; i<nCount; ++i) { 
            roiManager("select", i)
            Roi.getCoordinates(x,y);
            labeltype = Roi.getName;
            print(title2, labeltype + "\t" + x[0] + "\t" + y[0] + "\t" + x[1]+ "\t" + y[1] + "\t" + x[2] + "\t" + y[2] + "\t" + x[3] + "\t" + y[3] + "\t" );
        }
        selectWindow(title1);
        newtitle = replace(mainTitle, ".jpg", ".txt");
        saveAs("text", output_dir + File.separator + newtitle);
        selectWindow(title1);
        run("Close");
    }

    function close_all(){
        if (isOpen("Log")) { 
            selectWindow("Log"); 
            run("Close"); 
        }

        list = getList("window.titles"); 
        for (i=0; i<list.length; i++){ 
            winame = list[i]; 
            selectWindow(winame); 
            if (winame!="new action bar"){
                run("Close"); 
            }	 
        }
    }

    function read_annotation_file(filepath){
        open(filepath);
        selectWindow(File.name);
        getLocationAndSize(x, y, width, height);
        setLocation(screenWidth/2 - width/2, 10, width*(screenHeight-40)/height, screenHeight-40); 
    
        temp = File.nameWithoutExtension;
        fn = File.name;
        path = File.directory;
        textPath = path+temp+".txt";
        call("ij.Prefs.set", "my.path", path);
        call("ij.Prefs.set", "my.filename", fn);
        roiManager("show all with labels");

        if (File.exists(textPath)) {            
            lineseparator = "\n";
            cellseparator = "\t";
            lines=split(File.openAsString(textPath), lineseparator);                        

            // dispatches the data into the new RT
            setBatchMode(true);
            for (i=0; i<lines.length; i++) {
                items=split(lines[i], cellseparator);
                makePolygon(items[1], items[2], items[3], items[4], items[5], items[6], items[7], items[8]);
                Roi.setStrokeWidth(1);
                Roi.setStrokeColor('green');
                Roi.setName(items[0]);
                roiManager("Add");                
            }

            if (lines.length > 1) 
                roiManager("select", 0);

        }
        
        set_and_zoom();
    }

    function clear_all(){
        close("*");
        if (isOpen("ROI Manager")) {
            selectWindow("ROI Manager");
            run("Close");
        } 
    }

    function get_image_list(myPath){                
        list = getFileList(myPath);
        imglist = newArray();
        for (i=0; i<list.length; ++i) {
            if (endsWith(list[i], ".jpg") || endsWith(list[i], ".png") || endsWith(list[i], ".jpeg")) {
                imglist=Array.concat(imglist,list[i]);
            }
        }
        return imglist;
    }

    function add_polygon_rectangle(){
        getSelectionCoordinates(x, y);    
        
        if (x.length < 4){
	        exit('Box label need 4 point')
        }else{
	        makePolygon(x[0], y[0], x[1], y[1], x[2], y[2], x[3], y[3]);
        }
        roiManager("Add");
    }

    function delete_rectangle(){
        setBatchMode(true);
        Roi.getBounds(x,y, width, height);
        bottom_right_x = x + width;
        bottom_right_y = y + height ; 
        nCount = roiManager('count');
        for (i = nCount-1 ; i >= 0 ; i --){
	        roiManager('select', i);
	        Roi.getBounds(bx, by, bwidth, bheight)	
	        if( x <= bx && y<= by && bx + bwidth < bottom_right_x && by+bheight < bottom_right_y){
		        roiManager('delete'); 
		        Roi.remove;
	        }
        }
    }

</codeLibrary>

<line>
<button> 1 line 1
label=Choose an image file to start/continue labeling
icon=kitti label/image1_1.png
arg=<macro>

macro "open file and roi - C0a0L18f8L818e" {
    clear_all();
    filepath=File.openDialog("CHOOSE THE IMAGE TO EDIT / CREATE LABELS");
    read_annotation_file(filepath);
    set_and_zoom();
}

</macro>


<button> 2 line 1
label= save edited labels
icon=kitti label/image2_1.png
arg=<macro>

    mainTitle = getTitle();    
    save_result(mainTitle);		

</macro>


<button> 3 line 1
label= Save label and close image
icon=kitti label/image3_1.png
arg=<macro>

    mainTitle = getTitle();        
    save_result(mainTitle);
    close_all();

</macro>

<button> 4 line 1
label= add label
icon=kitti label/add.png
arg=<macro>

    add_polygon_rectangle();

</macro>


<button> 5 line 1
label=Prev image (jpeg or png)
icon=kitti label/image6_2.png
arg=<macro>  

    myPath = call("ij.Prefs.get", "my.path", 0);
    myFilename = call("ij.Prefs.get", "my.filename", 1);
    imglist = get_image_list(myPath);
    fileorder = indexOfArray(imglist, myFilename);
    if (fileorder > 0) {
        fileorder = fileorder - 1;
    }else {
        fileorder = imglist.length - 1;
    }
    myFilename=imglist[fileorder]; 

    clear_all();
    read_annotation_file(myPath+File.separator+myFilename);

</macro>


<button> 6 line 1
label=Next image (jpeg or png)
icon=kitti label/image6_1.png
arg=<macro>  

    myPath = call("ij.Prefs.get", "my.path", 0);
    myFilename = call("ij.Prefs.get", "my.filename", 1);
    imglist = get_image_list(myPath);
    fileorder=indexOfArray(imglist, myFilename);        
    if (fileorder < imglist.length-1) {
        fileorder = fileorder + 1;
    }else {
        fileorder = 0;
    }
    myFilename=imglist[fileorder];

    clear_all(); 
    read_annotation_file(myPath+File.separator+myFilename);
</macro>


<button> 7 line 1
label= delete rectangle
icon=kitti label/delete.png
arg=<macro> 

    delete_rectangle();

</macro>
</line>
// end of file
